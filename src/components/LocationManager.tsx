import { useState, useEffect } from 'react';
import { MapPin, Home, Heart, Plus, Trash2, Search } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Switch } from '@/components/ui/switch';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { 
  getLocationSettings, 
  addHomeLocation, 
  addInterestLocation, 
  removeLocation, 
  toggleLocationActive,
  geocodeAddress 
} from '@/services/locationService';
import type { LocationSettings } from '@/types/location';

interface LocationManagerProps {
  onLocationUpdate?: () => void;
}

const LocationManager = ({ onLocationUpdate }: LocationManagerProps) => {
  const [settings, setSettings] = useState<LocationSettings>(getLocationSettings());
  const [isAddingLocation, setIsAddingLocation] = useState(false);
  const [locationType, setLocationType] = useState<'home' | 'interest'>('home');
  const [locationName, setLocationName] = useState('');
  const [locationAddress, setLocationAddress] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [addressSuggestions, setAddressSuggestions] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);

  // Ï£ºÏÜå ÏûêÎèôÏôÑÏÑ± Îç∞Ïù¥ÌÑ∞
  const commonAddresses = [
    'Í∞ïÎÇ®Íµ¨ Ïó≠ÏÇºÎèô',
    'Í∞ïÎÇ®Íµ¨ ÏÇºÏÑ±Îèô',
    'Í∞ïÎÇ®Íµ¨ ÎÖºÌòÑÎèô',
    'ÏÑúÏ¥àÍµ¨ ÏÑúÏ¥àÎèô',
    'ÏÑúÏ¥àÍµ¨ Î∞òÌè¨Îèô',
    'ÎßàÌè¨Íµ¨ ÌôçÎåÄÏûÖÍµ¨',
    'ÎßàÌè¨Íµ¨ ÏÉÅÏïîÎèô',
    'ÏÜ°ÌååÍµ¨ Ïû†Ïã§Îèô',
    'ÏÜ°ÌååÍµ¨ Î∞©Ïù¥Îèô',
    'Ï¢ÖÎ°úÍµ¨ Î™ÖÎèô',
    'Ï¢ÖÎ°úÍµ¨ Ïù∏ÏÇ¨Îèô',
    'Ï§ëÍµ¨ ÏùÑÏßÄÎ°ú',
    'Ï§ëÍµ¨ Î™ÖÎèô',
    'Ïö©ÏÇ∞Íµ¨ Ïù¥ÌÉúÏõê',
    'Ïö©ÏÇ∞Íµ¨ ÌïúÎÇ®Îèô',
    'ÏòÅÎì±Ìè¨Íµ¨ Ïó¨ÏùòÎèÑ',
    'Íµ¨Î°úÍµ¨ Íµ¨Î°úÎèô',
    'Í¥ÄÏïÖÍµ¨ Ïã†Î¶ºÎèô',
    'ÎèôÏûëÍµ¨ ÏÇ¨ÎãπÎèô',
    'ÏÑ±ÎèôÍµ¨ ÏÑ±ÏàòÎèô'
  ];

  useEffect(() => {
    setSettings(getLocationSettings());
  }, []);

  // Ï£ºÏÜå ÏûÖÎ†• Ïãú ÏûêÎèôÏôÑÏÑ± Ï†úÏïà
  const handleAddressChange = (value: string) => {
    setLocationAddress(value);
    
    if (value.length > 0) {
      const filtered = commonAddresses.filter(addr => 
        addr.toLowerCase().includes(value.toLowerCase())
      );
      setAddressSuggestions(filtered.slice(0, 5));
      setShowSuggestions(true);
    } else {
      setShowSuggestions(false);
    }
  };

  const selectSuggestion = (suggestion: string) => {
    setLocationAddress(suggestion);
    setShowSuggestions(false);
  };

  const handleAddLocation = async () => {
    if (!locationName.trim() || !locationAddress.trim()) return;
    
    setIsLoading(true);
    try {
      const coordinates = await geocodeAddress(locationAddress);
      if (!coordinates) {
        alert('Ï£ºÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      if (locationType === 'home') {
        addHomeLocation(locationName, locationAddress, coordinates);
      } else {
        addInterestLocation(locationName, locationAddress, coordinates);
      }

      setSettings(getLocationSettings());
      setIsAddingLocation(false);
      setLocationName('');
      setLocationAddress('');
      setShowSuggestions(false);
      onLocationUpdate?.();
    } catch (error) {
      alert(error instanceof Error ? error.message : 'ÏúÑÏπò Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRemoveLocation = (locationId: string) => {
    removeLocation(locationId);
    setSettings(getLocationSettings());
    onLocationUpdate?.();
  };

  const handleToggleActive = (locationId: string) => {
    toggleLocationActive(locationId);
    setSettings(getLocationSettings());
    onLocationUpdate?.();
  };

  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const coords = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          addHomeLocation('ÌòÑÏû¨ ÏúÑÏπò', 'ÌòÑÏû¨ ÏúÑÏπò', coords);
          setSettings(getLocationSettings());
          onLocationUpdate?.();
        },
        (error) => {
          alert('ÌòÑÏû¨ ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        }
      );
    }
  };

  return (
    <div className="space-y-4">
      {/* ÎÇ¥ Ïßë ÏÑ§Ï†ï */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Home className="w-5 h-5 text-blue-600" />
            ÎÇ¥ Ïßë
          </CardTitle>
        </CardHeader>
        <CardContent>
          {settings.homeLocation ? (
            <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg border-2 border-blue-200">
              <div className="flex-1">
                <div className="font-medium flex items-center gap-2">
                  üè† {settings.homeLocation.name}
                </div>
                <div className="text-sm text-gray-600">{settings.homeLocation.address}</div>
              </div>
              <div className="flex items-center gap-2">
                <Switch
                  checked={settings.homeLocation.isActive}
                  onCheckedChange={() => handleToggleActive('home')}
                />
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleRemoveLocation('home')}
                  className="text-red-600 hover:text-red-700"
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-2">
              <Dialog open={isAddingLocation && locationType === 'home'} onOpenChange={(open) => {
                setIsAddingLocation(open);
                if (open) setLocationType('home');
                if (!open) {
                  setLocationName('');
                  setLocationAddress('');
                  setShowSuggestions(false);
                }
              }}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="w-full border-dashed border-2 border-blue-300 text-blue-600 hover:bg-blue-50">
                    <Plus className="w-4 h-4 mr-2" />
                    ÎÇ¥ Ïßë ÏÑ§Ï†ïÌïòÍ∏∞
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <Home className="w-5 h-5 text-blue-600" />
                      ÎÇ¥ Ïßë ÏÑ§Ï†ï
                    </DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <Label>Ïù¥Î¶Ñ</Label>
                      <Input
                        placeholder="Ïö∞Î¶¨Ïßë"
                        value={locationName}
                        onChange={(e) => setLocationName(e.target.value)}
                      />
                    </div>
                    <div className="relative">
                      <Label>Ï£ºÏÜå</Label>
                      <Input
                        placeholder="Í∞ïÎÇ®Íµ¨ Ïó≠ÏÇºÎèô (ÏûêÎèôÏôÑÏÑ± ÏßÄÏõê)"
                        value={locationAddress}
                        onChange={(e) => handleAddressChange(e.target.value)}
                        onFocus={() => locationAddress.length > 0 && setShowSuggestions(true)}
                      />
                      {showSuggestions && addressSuggestions.length > 0 && (
                        <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-40 overflow-y-auto">
                          {addressSuggestions.map((suggestion, index) => (
                            <button
                              key={index}
                              onClick={() => selectSuggestion(suggestion)}
                              className="w-full text-left px-3 py-2 hover:bg-gray-50 first:rounded-t-lg last:rounded-b-lg text-sm"
                            >
                              <Search className="w-4 h-4 inline mr-2 text-gray-400" />
                              {suggestion}
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                    <div className="flex gap-2">
                      <Button
                        onClick={handleAddLocation}
                        disabled={isLoading || !locationName.trim() || !locationAddress.trim()}
                        className="flex-1"
                      >
                        {isLoading ? 'Ï∂îÍ∞Ä Ï§ë...' : 'Ï∂îÍ∞Ä'}
                      </Button>
                      <Button
                        variant="outline"
                        onClick={getCurrentLocation}
                        className="flex-shrink-0"
                        title="ÌòÑÏû¨ ÏúÑÏπò ÏÇ¨Ïö©"
                      >
                        <MapPin className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Í¥ÄÏã¨ ÏßÄÏó≠ ÏÑ§Ï†ï */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Heart className="w-5 h-5 text-pink-600" />
            Í¥ÄÏã¨ ÏßÄÏó≠ (ÏµúÎåÄ 3Í≥≥)
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {settings.interestLocations.map((location) => (
              <div key={location.id} className="flex items-center justify-between p-3 bg-pink-50 rounded-lg border-2 border-pink-200">
                <div className="flex-1">
                  <div className="font-medium flex items-center gap-2">
                    üè° {location.name}
                  </div>
                  <div className="text-sm text-gray-600">{location.address}</div>
                </div>
                <div className="flex items-center gap-2">
                  <Switch
                    checked={location.isActive}
                    onCheckedChange={() => handleToggleActive(location.id)}
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleRemoveLocation(location.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            ))}

            {settings.interestLocations.length < 3 && (
              <Dialog open={isAddingLocation && locationType === 'interest'} onOpenChange={(open) => {
                setIsAddingLocation(open);
                if (open) setLocationType('interest');
                if (!open) {
                  setLocationName('');
                  setLocationAddress('');
                  setShowSuggestions(false);
                }
              }}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="w-full border-dashed border-2 border-pink-300 text-pink-600 hover:bg-pink-50">
                    <Plus className="w-4 h-4 mr-2" />
                    Í¥ÄÏã¨ ÏßÄÏó≠ Ï∂îÍ∞Ä
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <Heart className="w-5 h-5 text-pink-600" />
                      Í¥ÄÏã¨ ÏßÄÏó≠ Ï∂îÍ∞Ä
                    </DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <Label>Ïù¥Î¶Ñ</Label>
                      <Input
                        placeholder="ÌöåÏÇ¨, ÌïôÍµê Îì±"
                        value={locationName}
                        onChange={(e) => setLocationName(e.target.value)}
                      />
                    </div>
                    <div className="relative">
                      <Label>Ï£ºÏÜå</Label>
                      <Input
                        placeholder="ÏÑúÏ¥àÍµ¨ ÏÑúÏ¥àÎèô (ÏûêÎèôÏôÑÏÑ± ÏßÄÏõê)"
                        value={locationAddress}
                        onChange={(e) => handleAddressChange(e.target.value)}
                        onFocus={() => locationAddress.length > 0 && setShowSuggestions(true)}
                      />
                      {showSuggestions && addressSuggestions.length > 0 && (
                        <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-40 overflow-y-auto">
                          {addressSuggestions.map((suggestion, index) => (
                            <button
                              key={index}
                              onClick={() => selectSuggestion(suggestion)}
                              className="w-full text-left px-3 py-2 hover:bg-gray-50 first:rounded-t-lg last:rounded-b-lg text-sm"
                            >
                              <Search className="w-4 h-4 inline mr-2 text-gray-400" />
                              {suggestion}
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                    <Button
                      onClick={handleAddLocation}
                      disabled={isLoading || !locationName.trim() || !locationAddress.trim()}
                      className="w-full"
                    >
                      {isLoading ? 'Ï∂îÍ∞Ä Ï§ë...' : 'Ï∂îÍ∞Ä'}
                    </Button>
                  </div>
                </DialogContent>
              </Dialog>
            )}
          </div>
        </CardContent>
      </Card>

      {/* ÏÇ¨Ïö© ÏïàÎÇ¥ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
        <h4 className="text-sm font-medium text-blue-800 mb-2">üí° ÏÇ¨Ïö© ÏïàÎÇ¥</h4>
        <ul className="text-xs text-blue-700 space-y-1">
          <li>‚Ä¢ ÏÑ§Ï†ïÎêú ÏúÑÏπòÎäî ÏßÄÎèÑÏóêÏÑú üè†üè° ÏïÑÏù¥ÏΩòÏúºÎ°ú ÌëúÏãúÎê©ÎãàÎã§</li>
          <li>‚Ä¢ Ïä§ÏúÑÏπòÎ•º ÎÅÑÎ©¥ ÏßÄÎèÑÏóêÏÑú Ïà®Í∏∏ Ïàò ÏûàÏäµÎãàÎã§</li>
          <li>‚Ä¢ Ï£ºÏÜå ÏûÖÎ†• Ïãú ÏûêÎèôÏôÑÏÑ±ÏùÑ ÌôúÏö©ÌïòÏÑ∏Ïöî</li>
          <li>‚Ä¢ ÌòÑÏû¨ ÏúÑÏπò Î≤ÑÌäºÏúºÎ°ú GPS ÏúÑÏπòÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§</li>
        </ul>
      </div>
    </div>
  );
};

export default LocationManager;